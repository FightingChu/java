package Utils;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Base64.Decoder;

import org.apache.commons.codec.binary.Base64;

public class Convert_String {
	//音频转化为base64字符串
	public static String getVideoString(String videoFile){
		InputStream in = null;
		byte [] data = null;
		//读取视频
		try{
			if(videoFile == null || "".equals(videoFile)){
				videoFile = "路径";
				}
			in = new FileInputStream(videoFile);
			data = new byte[in.available()];
			in.read(data);
		}catch (Exception e) {
		}
		return videoFile;
	}
	
	//转换文件为Base64流
	public static String FileToString(String path){
		File file = new File(path);
		InputStream input = null;
        // file.length()返回文件的字节长
		byte[] photoByte = new byte[(int) file.length()];
		try {
			input = new FileInputStream(file);
            // 将文件中的内容读入到数组中
			input.read(photoByte);
			input.close();
		} catch (Exception e) {
			e.printStackTrace();
		} 
		String content = Base64.encodeBase64String(photoByte);
		byte[] f =Base64.decodeBase64(content);
		return content;
	}
	
	//转化Base64流为文件
	public static void base64ToFile(String content, File toFile) throws Exception{
			String string = content;
			ByteArrayInputStream in = null;
			FileOutputStream out = null;
		try {
			byte[] bytes = Base64.decodeBase64(content.trim());
			in = new ByteArrayInputStream(bytes);
			byte[] buffer = new byte[1024];
			out = new FileOutputStream(toFile);
			int bythread = 0;
			while ((bythread = in.read(buffer)) != -1) {
				out.write(buffer, 0, bythread);
			} 
		} catch (IOException e) {
			e.printStackTrace();
		} finally{
            if(out!=null)
                out.close();
            if(in!=null)
                in.close();
        }
	}
}
